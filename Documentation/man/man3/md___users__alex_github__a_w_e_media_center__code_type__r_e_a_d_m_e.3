.TH "md___users__alex_github__a_w_e_media_center__code_type__r_e_a_d_m_e" 3 "Fri Apr 18 2014" "Version 0.1" "AWE Media Center" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md___users__alex_github__a_w_e_media_center__code_type__r_e_a_d_m_e \- Media Types 
The information for a media type is kept in a JSON file: 
.PP
.nf
{
    "metadata": {
        "type": "type name",
        "name": "",
        "location": "",
        "description": "",

        "icons": {
            "default": 0,
            "files": []
        },

        "fanarts": {
            "default": 0,
            "files": []
        }

        "details": {
            "_order": ["first detail", "second", ...],

            "first detail": <default value>,
            "second": <default value>,
            // more default details attributes
        }

        // other default metadata attributes
    }

    "organize by": [
        { "prop": "property 1", "show": true or false },
        { "prop": "property 2", "show": true or false },
        // more properties
    ]
}

.fi
.PP
.PP
The \fC'organize by'\fP tag indicates how the files should be organized by the folder generator\&. To better explain this, take TV episodes\&. The episodes should be organized by series and then season\&. So the \fC'organize by'\fP property would be: 
.PP
.nf
[
    { "prop": "Series", "show": false },
    { "prop": "Season", "show": true  },
]

.fi
.PP
.PP
Then, when the folder is generated, the folder structure would look like this: 
.PP
.nf
All Items
├── <name of series>
│   ├── Season <#>
│   │   └── <Episodes>
│   └── Season <#>
│       └── <Episodes>
└── <name of series>
    ├── Season <#>
    │   └── <Episodes>
    └── Season <#>
        └── <Episodes>

.fi
.PP
.PP
So \fC'prop'\fP names the details property to use while \fC'show'\fP decides if the property name, followed by a space, should be prefixed to the value\&. In the above example, the series names should not be prefixed by 'Series ', while the season numbers should be prefixed by 'Season '\&.
.PP
\fC'prop'\fP can be a string, number, or boolean, but it cannot be an array or an object\&.
.PP
.SH "Folder Structure Generation"
.PP
.PP
In addition to the \fCAll Items\fP folder described above, there are also folders for every member of \fC'metadata\&.details'\fP not indicated in \fC'organize by'\fP\&. If, for example, there were a \fC'metadata\&.details\&.Genre'\fP tag that was not indicated in \fC'organize by'\fP, the following folder structure would be generated: 
.PP
.nf
Genre
├── Genre Value 1
│   └── Files with that value
└── Genre Value 2
    └── Files with that value

.fi
.PP
.PP
If the detail is a string, integer, or boolean, it is displayed directly as one of the values\&. If the detail is an array, each element in that array is a value\&. So if a movie has two directors, Bob and Bill, that movie appears under both Bob and Bill\&. Bob and Bill are separate folders under the Director(s) folder\&.
.PP
All generated folder structures have an All Items folder that lists all of the items\&. 
