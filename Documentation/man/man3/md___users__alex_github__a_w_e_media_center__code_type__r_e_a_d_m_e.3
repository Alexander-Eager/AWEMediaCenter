.TH "md___users__alex_github__a_w_e_media_center__code_type__r_e_a_d_m_e" 3 "Sat May 10 2014" "Version 0.1" "AWE Media Center" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md___users__alex_github__a_w_e_media_center__code_type__r_e_a_d_m_e \- Media Types 
The information for a media type is kept in a JSON file: 
.PP
.nf
{
    "type": <"folder" or "file">,

    "metadata": {
        "type": <type name>,
        "name": "",
        "location": "",

        "description": "",

        "icons": {
            "default": 0,
            "files": []
        },

        "fanarts": {
            "default": 0,
            "files": []
        },

        "details": {
            "_order": [<first detail>, <second detail>, ...],

            <first detail>: <default value>,
            <second detail>: <default value>,
            // more default details attributes
        }
    },

    "matching files": [
        <file expression you could use in terminal>,
        // more file expressions that also match
    ]

    "contains": [
        // nested media types
    ]
}

.fi
.PP
.PP
.SH "Metadata Default Values"
.PP
.PP
Sometimes, a property cannot be given a value\&. In these instances, the value should be specified as the default value\&. Specified by \fC''\fP or \fC[]\fP\&.
.PP
A metadata scraper can decide to inherit a property from the parent folder, which is another kind of default property, but that is not explicity defined in type or file JSON configurations\&.
.PP
.SH "Folder Structure Generation"
.PP
.PP
.SS "Explanation of File Organization"
.PP
The \fC'contains'\fP tag indicates how the files should be organized by the folder generator\&. To better explain this, take TV episodes\&. The episodes should be organized by series and then season\&. So the \fC'contains'\fP property of the \fC'TV Series'\fP type would contain the \fC'TV Season'\fP type, which would contain the \fC'TV Episode'\fP type\&.
.PP
Then, when the folder is generated, the folder structure would look like this: 
.PP
.nf
All Items
├── <name of series>
│   ├── <season #>
│   │   └── <Episodes>
│   └── <season #>
│       └── <Episodes>
└── <name of series>
    ├── <season #>
    │   └── <Episodes>
    └── <season #>
        └── <Episodes>

.fi
.PP
.PP
You can instantiate the sub-type only if you so desire\&. You can instantiate the \fC'TV Episode'\fP type by itself\&. Because of this, you should list the properties from the hierarchy, like \fC'Season'\fP and \fC'Series'\fP, in the \fC'metadata\&.details'\fP tag\&.
.PP
.SS "Root directories for the type"
.PP
In addition to the \fCAll Items\fP folder described above, there are also folders for every member of \fC'metadata\&.details'\fP\&. If, for example, there were a \fC'metadata\&.details\&.Genre'\fP, the following folder structure would be generated: 
.PP
.nf
Genre
├── Genre Value 1
│   └── Files with that value
└── Genre Value 2
    └── Files with that value

.fi
.PP
.PP
If the detail is a string, integer, or boolean, it is displayed directly as one of the values\&. If the detail is an array, each element in that array is a value\&. So if a movie has two directors, \fCBob\fP and \fCBill\fP, that movie appears under both \fCBob\fP and \fCBill\fP\&. \fCBob\fP and \fCBill\fP are separate folders under the \fCDirector\fP folder\&. Also note that the actual property name is \fCDirector(s)\fP, but the folder name is \fCDirector\fP\&. If a section of text is contained in \fC()\fP, \fC{}\fP, or \fC[]\fP in a detail's name, that text along with the \fC()\fP, \fC{}\fP, or \fC[]\fP, is removed\&. In addition, other special characters that are not allowed in file names are removed individually\&. When defining a new type, you should name your detail properties carefully to avoid awkward folder names\&.
.PP
All generated folder structures have an \fCAll Items\fP folder that lists all of the items\&. 
