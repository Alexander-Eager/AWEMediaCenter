.TH "AWE::JSONScraper" 3 "Sat May 10 2014" "Version 0.1" "AWE Media Center" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AWE::JSONScraper \- 
.PP
A metadata scraper based on JSON files\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <AWEJSONScraper\&.h>\fP
.PP
Inherits \fBAWE::MetadataScraper\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBJSONScraper\fP (QString name, QString type)"
.br
.RI "\fIConstruct a new JSON-based scraper from the given name\&. \fP"
.ti -1c
.RI "virtual bool \fBprepare\fP (\fBGlobalSettings\fP *settings)"
.br
.RI "\fIPrepares the scraper by reading the scraper and type files\&. \fP"
.ti -1c
.RI "virtual bool \fBscrapeDataForFile\fP (\fBMediaItem\fP *file, bool askUser, bool import, bool inheritMetadata)"
.br
.RI "\fIRetrieves metadata for a media file\&. \fP"
.ti -1c
.RI "virtual QList< \fBMediaItem\fP * > \fBscrapeDataForFile\fP (\fBFolder\fP *placeInMe, \fBGlobalSettings\fP *globalSettings, QDir file, bool askUser, bool import, bool inheritMetadata)"
.br
.RI "\fICreate a media item (or multiple if applicable) from a given file or folder\&. \fP"
.ti -1c
.RI "virtual void \fBdeactivate\fP ()"
.br
.RI "\fIDestroys any used-up dynamic memory\&. \fP"
.ti -1c
.RI "virtual bool \fBisValid\fP ()"
.br
.RI "\fIDetermines if this is scraper can be used\&. \fP"
.ti -1c
.RI "virtual QString \fBgetName\fP ()"
.br
.RI "\fIGets the name of the scraper\&. \fP"
.ti -1c
.RI "virtual QString \fBgetType\fP ()"
.br
.RI "\fIGets the media type for this scraper\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "bool \fBexecuteProcedure\fP (\fBJson::Value\fP &procedure, QRegularExpressionMatch backrefs, bool askUser, bool import, bool inheritMetadata)"
.br
.RI "\fIExecute a specific procedure from a \fC'procedures'\fP array\&. \fP"
.ti -1c
.RI "bool \fBuseMatchForProcedure\fP (\fBJson::Value\fP &procedure, QRegularExpressionMatch backrefs, bool askUser, bool import, bool inheritMetadata)"
.br
.RI "\fIHelper function that sets properties and executes sub-procedures\&. \fP"
.ti -1c
.RI "void \fBimportFiles\fP (\fBJson::Value\fP &props)"
.br
.RI "\fIHelper function that imports the files in the given \fC\fBJson::Value\fP\fP\&. \fP"
.ti -1c
.RI "int \fBreplaceBackrefs\fP (QString &pseudo_reg, QRegularExpressionMatch backrefs)"
.br
.RI "\fIReplace the backreferences in \fCpseudo_reg\fP with the references from \fCbackrefs\fP\&. \fP"
.ti -1c
.RI "QString & \fBgetFileContents\fP (QString file)"
.br
.RI "\fIGet the contents of a file, either from the already opened files or a new file\&. \fP"
.ti -1c
.RI "bool \fBcheckValidity\fP ()"
.br
.RI "\fIDoes a test run of the procedures to decide if this scraper is valid\&. \fP"
.ti -1c
.RI "bool \fBcheckProcedureValidity\fP (\fBJson::Value\fP &procedure, int capCount)"
.br
.RI "\fIDoes a test run of a procedure to decide if it is valid\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fBmyValidity\fP"
.br
.RI "\fICan this be used effectively? \fP"
.ti -1c
.RI "QString \fBmyName\fP"
.br
.RI "\fIName of the scraper\&. \fP"
.ti -1c
.RI "QString \fBmyType\fP"
.br
.RI "\fIThe type of the scraper\&. \fP"
.ti -1c
.RI "\fBJson::Value\fP \fBmyScraper\fP"
.br
.RI "\fIThe data determining how to scrape\&. \fP"
.ti -1c
.RI "\fBJson::Value\fP \fBmyDefaultProperties\fP"
.br
.RI "\fIThe global settings\&. \fP"
.ti -1c
.RI "\fBMediaItem\fP * \fBmyCurrentFile\fP"
.br
.RI "\fIThe current file\&. \fP"
.ti -1c
.RI "\fBFolder\fP * \fBmyCurrentFolder\fP"
.br
.RI "\fIThe folder contianing myCurrentFile\&. \fP"
.ti -1c
.RI "\fBGlobalSettings\fP * \fBmyGlobalSettings\fP"
.br
.RI "\fIThe global settings of \fBAWEMC\fP\&. \fP"
.ti -1c
.RI "QHash< QString, QString > \fBmyMetadataFiles\fP"
.br
.RI "\fIMaps file onto file contents (for speed boost)\&. \fP"
.ti -1c
.RI "QHash< QString, QString > \fBmyInheritedProperties\fP"
.br
.RI "\fIMaps \fCmyCurrentFile\fP props onto \fCmyCurrentFolder\fP props\&. \fP"
.ti -1c
.RI "QSet< QString > \fBmyFileProperties\fP"
.br
.RI "\fISet of file properties\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
A metadata scraper based on JSON files\&. 


.PP
\fBTodo\fP
.RS 4
Change \fCmyType\fP to be the mystical know-all configuration object\&.
.RE
.PP
.PP
One way of defining a scraper is through a JSON file interpreted by an instantiation of this class\&. To read more about the format of such a JSON file, read \fBthis document\fP\&.
.PP
For information on media types, read \&.\&./type/README\&.md 'this document'\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "JSONScraper::JSONScraper (QStringname, QStringtype)"

.PP
Construct a new JSON-based scraper from the given name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the scraper\&. 
.br
\fItype\fP The media type for this scraper\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "bool JSONScraper::checkProcedureValidity (\fBJson::Value\fP &procedure, intcapCount)\fC [private]\fP"

.PP
Does a test run of a procedure to decide if it is valid\&. 
.PP
\fBTodo\fP
.RS 4
This entire function (which at the moment just returns \fCtrue\fP)
.RE
.PP
.PP
\fBParameters:\fP
.RS 4
\fIprocedure\fP The procedure to check\&. 
.br
\fIcapCount\fP The number of backrefs passed to the procedure\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if \fCprocedure\fP is safe to use, \fCfalse\fP otherwise\&. 
.RE
.PP

.SS "bool JSONScraper::checkValidity ()\fC [private]\fP"

.PP
Does a test run of the procedures to decide if this scraper is valid\&. 
.PP
\fBTodo\fP
.RS 4
This entire function (which at the moment just returns \fCtrue\fP)
.RE
.PP
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if this scraper is safe to use, \fCfalse\fP otherwise\&. 
.RE
.PP

.SS "void JSONScraper::deactivate ()\fC [virtual]\fP"

.PP
Destroys any used-up dynamic memory\&. This helps with memory management\&. 
.PP
Implements \fBAWE::MetadataScraper\fP\&.
.SS "bool JSONScraper::executeProcedure (\fBJson::Value\fP &procedure, QRegularExpressionMatchbackrefs, boolaskUser, boolimport, boolinheritMetadata)\fC [private]\fP"

.PP
Execute a specific procedure from a \fC'procedures'\fP array\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprocedure\fP The procedure to execute\&. 
.br
\fIbackrefs\fP The backreferences to use on the \fC'look in file'\fP and \fC'for'\fP tags\&. 
.br
\fIaskUser\fP \fCtrue\fP if the user wants semi-automatic scraping, \fCfalse\fP if completely automatic\&. 
.br
\fIimport\fP \fCtrue\fP if the user wants to import files, \fCfalse\fP if the user wants links\&. 
.br
\fIinheritMetadata\fP \fCtrue\fP if designated metadata items should be inherited from the containing folder, \fCfalse\fP otherwise\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if the procedure ran without issue, \fCfalse\fP otherwise\&. 
.RE
.PP

.SS "QString & JSONScraper::getFileContents (QStringfile)\fC [private]\fP"

.PP
Get the contents of a file, either from the already opened files or a new file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfile\fP The file to get the contents for\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The contents of \fCfile\fP\&. 
.RE
.PP

.SS "QString JSONScraper::getName ()\fC [virtual]\fP"

.PP
Gets the name of the scraper\&. 
.PP
\fBReturns:\fP
.RS 4
The name of the scraper\&. 
.RE
.PP

.PP
Implements \fBAWE::MetadataScraper\fP\&.
.SS "QString JSONScraper::getType ()\fC [virtual]\fP"

.PP
Gets the media type for this scraper\&. 
.PP
\fBReturns:\fP
.RS 4
The media type name for the scraper\&. 
.RE
.PP

.PP
Implements \fBAWE::MetadataScraper\fP\&.
.SS "void JSONScraper::importFiles (\fBJson::Value\fP &props)\fC [private]\fP"

.PP
Helper function that imports the files in the given \fC\fBJson::Value\fP\fP\&. This is used for the \fC'force copy'\fP and \fC'copy'\fP tags\&.
.PP
\fBParameters:\fP
.RS 4
\fIprops\fP The properties that contain files to import\&. 
.RE
.PP

.SS "bool JSONScraper::isValid ()\fC [virtual]\fP"

.PP
Determines if this is scraper can be used\&. 
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if this scraper can be used successfully, \fCfalse\fP otherwise\&. 
.RE
.PP

.PP
Implements \fBAWE::MetadataScraper\fP\&.
.SS "bool JSONScraper::prepare (\fBGlobalSettings\fP *settings)\fC [virtual]\fP"

.PP
Prepares the scraper by reading the scraper and type files\&. This helps with memory management\&.
.PP
\fBParameters:\fP
.RS 4
\fIsettings\fP The \&.\&./settings/README\&.md 'global settings of AWEMC'\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if the scraper was able to prepare itself, \fCfalse\fP if an error occured and scraping should be aborted\&. Generally, a \fCfalse\fP result here means that the JSON file was incorrectly written\&. 
.RE
.PP

.PP
Implements \fBAWE::MetadataScraper\fP\&.
.SS "int JSONScraper::replaceBackrefs (QString &pseudo_reg, QRegularExpressionMatchbackrefs)\fC [private]\fP"

.PP
Replace the backreferences in \fCpseudo_reg\fP with the references from \fCbackrefs\fP\&. \fCpseudo_reg\fP should be formatted according to \fCthis function's\fP \fCfmt\fP parameter\&.
.PP
\fBParameters:\fP
.RS 4
\fIpseudo_reg\fP The \fCQString\fP with the references to replace\&. 
.br
\fIbackrefs\fP The backreferences to use\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The highest backref requested\&. 
.RE
.PP

.SS "bool JSONScraper::scrapeDataForFile (\fBMediaItem\fP *file, boolaskUser, boolimport, boolinheritMetadata)\fC [virtual]\fP"

.PP
Retrieves metadata for a media file\&. To construct your JSON file, you should use \fCjsoncpp\fP\&.
.PP
\fCaskUser\fP tells your scraper if the user wants to be given a list of choices for certain things\&. You should NOT ask the user for everything if \fCaskUser\fP is true; only basic things like, 'Which icon do you want to use?'
.PP
\fCimport\fP specifies if the files you get should be copied into \fBAWEMC\fP's folders\&. Do NOT copy the media file\&.
.PP
\fBTodo\fP
.RS 4
boolean flags
.RE
.PP
.PP
\fBParameters:\fP
.RS 4
\fIfile\fP The media file to get metadata for\&. 
.br
\fIaskUser\fP \fCtrue\fP if the user wants to be given choices, \fCfalse\fP otherwise\&. 
.br
\fIimport\fP \fCtrue\fP if the user wants to import metadata files, \fCfalse\fP otherwise\&. 
.br
\fIinheritMetadata\fP \fCtrue\fP if designated metadata items should be inherited from the containing folder, \fCfalse\fP otherwise\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if the scraper was able to get the metadata, \fCfalse\fP if it was not\&. 
.RE
.PP

.PP
Implements \fBAWE::MetadataScraper\fP\&.
.SS "QList< \fBMediaItem\fP * > JSONScraper::scrapeDataForFile (\fBFolder\fP *placeInMe, \fBGlobalSettings\fP *globalSettings, QDirfile, boolaskUser, boolimport, boolinheritMetadata)\fC [virtual]\fP"

.PP
Create a media item (or multiple if applicable) from a given file or folder\&. To construct your JSON file, you should use \fCJsonCpp\fP\&.
.PP
\fCaskUser\fP tells your scraper if the user wants to be given a list of choices for certain things\&. You should NOT ask the user for everything if \fCaskUser\fP is true; only basic things like, 'Which icon do you want to use?'
.PP
\fCimport\fP specifies if the files you get should be copied into \fBAWEMC\fP's folders\&. Do NOT copy the media file\&.
.PP
\fCinheritMetadata\fP determines if data that could be inherited from the folder should be\&.
.PP
\fBTodo\fP
.RS 4
boolean flags
.RE
.PP
.PP
\fBParameters:\fP
.RS 4
\fIplaceInMe\fP The \fC\fBFolder\fP\fP to put the created items in\&. 
.br
\fIfile\fP The file or folder to get media items for\&. 
.br
\fIglobalSettings\fP The global settings of \fBAWEMC\fP\&. 
.br
\fIaskUser\fP \fCtrue\fP if the user wants to be given choices, \fCfalse\fP otherwise\&. 
.br
\fIimport\fP \fCtrue\fP if the user wants to import metadata files, \fCfalse\fP otherwise\&. 
.br
\fIinheritMetadata\fP \fCtrue\fP if designated metadata items should be inherited from the containing folder, \fCfalse\fP otherwise\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A list of media items for the given file\&. The list is empty if the file does not match\&. 
.RE
.PP

.PP
Implements \fBAWE::MetadataScraper\fP\&.
.SS "bool JSONScraper::useMatchForProcedure (\fBJson::Value\fP &procedure, QRegularExpressionMatchbackrefs, boolaskUser, boolimport, boolinheritMetadata)\fC [private]\fP"

.PP
Helper function that sets properties and executes sub-procedures\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprocedure\fP The procedure describing the properties and sub-procedures\&. 
.br
\fIbackrefs\fP The backreferences to use on the properties tags\&. 
.br
\fIaskUser\fP \fCtrue\fP if the user wants semi-automatic scraping, \fCfalse\fP if completely automatic\&. 
.br
\fIimport\fP \fCtrue\fP if the user wants to import files, \fCfalse\fP if the user wants links\&. 
.br
\fIinheritMetadata\fP \fCtrue\fP if designated metadata items should be inherited from the containing folder, \fCfalse\fP otherwise\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if the procedure ran without issue, \fCfalse\fP otherwise\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for AWE Media Center from the source code\&.
