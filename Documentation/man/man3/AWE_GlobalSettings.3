.TH "AWE::GlobalSettings" 3 "Fri Apr 18 2014" "Version 0.1" "AWE Media Center" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AWE::GlobalSettings \- 
.PP
Holds the global settings for AWEMC\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <AWEGlobalSettings\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::set< std::string > \fBNameSet\fP"
.br
.RI "\fIThe set type used to hold names\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGlobalSettings\fP (const std::string &settingsFile)"
.br
.RI "\fICreate the global settings object\&. \fP"
.ti -1c
.RI "\fB~GlobalSettings\fP ()"
.br
.RI "\fIDeconstructor\&. \fP"
.ti -1c
.RI "\fBMetadataScraper\fP * \fBgetScraperByName\fP (const std::string &name)"
.br
.RI "\fIGet a metadata scraper by name\&. \fP"
.ti -1c
.RI "\fBJson::Value\fP & \fBgetScraperSettingsByName\fP (const std::string &name)"
.br
.RI "\fIGet a metadata scraper's settings by name\&. \fP"
.ti -1c
.RI "const \fBNameSet\fP & \fBgetAllMetadataScraperNames\fP ()"
.br
.RI "\fIGet a set of all metadata scrapers\&. \fP"
.ti -1c
.RI "\fBMediaPlayer\fP * \fBgetPlayerByName\fP (const std::string &name)"
.br
.RI "\fIGet a media player by name\&. \fP"
.ti -1c
.RI "\fBJson::Value\fP & \fBgetPlayerSettingsByName\fP (const std::string &name)"
.br
.RI "\fIGet a media player's settings by name\&. \fP"
.ti -1c
.RI "const \fBNameSet\fP & \fBgetAllMediaPlayerNames\fP ()"
.br
.RI "\fIGet a set of all media players\&. \fP"
.ti -1c
.RI "\fBJson::Value\fP & \fBgetTypeByName\fP (const std::string &name)"
.br
.RI "\fIGet the media type with the given name\&. \fP"
.ti -1c
.RI "const \fBNameSet\fP & \fBgetAllMediaTypeNames\fP ()"
.br
.RI "\fIGet a set of all media types\&. \fP"
.ti -1c
.RI "const \fBNameSet\fP & \fBgetAllMediaServiceNames\fP ()"
.br
.RI "\fIGet the names of all of the media services\&. \fP"
.ti -1c
.RI "\fBMediaService\fP * \fBgetMediaServiceByName\fP (const std::string &name)"
.br
.RI "\fIGet a media service by name\&. \fP"
.ti -1c
.RI "\fBMediaItem\fP * \fBgetMediaItemByJSONFile\fP (const QDir &file)"
.br
.RI "\fIGet a media item from its JSON file\&. \fP"
.ti -1c
.RI "void \fBaddFolder\fP (const std::string &path, \fBFolder\fP *folder)"
.br
.RI "\fIAdd the given folder\&. \fP"
.ti -1c
.RI "\fBFolder\fP * \fBgetRootFolder\fP ()"
.br
.RI "\fIGet the root folder\&. \fP"
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBJson::Value\fP \fBnull\fP = Value::null"
.br
.in -1c
.SH "Detailed Description"
.PP 
Holds the global settings for AWEMC\&. 


.PP
\fBTodo\fP
.RS 4
Skins\&.\&.\&. 
.PP
Get a better folder adding system\&.
.RE
.PP
.PP
Functions for pretty much anything you want to know about the prefernces for AWEMC are here\&. Every plugin extending AWEMC has its own configuration file, which is held in here via sub-configuration objects\&.
.PP
You shouldn't need to instantiate this class on your own; most objects are passed a copy of the settings object during creation or through some other means\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "GlobalSettings::GlobalSettings (const std::string &settingsFile)"

.PP
Create the global settings object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsettingsFile\fP The file that contains the settings for AWEMC (usually \fCsettings\&.json\fP in the root folder) 
.RE
.PP

.SS "GlobalSettings::~GlobalSettings ()"

.PP
Deconstructor\&. Deletes every scraper, player and item\&. 
.SH "Member Function Documentation"
.PP 
.SS "void GlobalSettings::addFolder (const std::string &path, \fBFolder\fP *folder)"

.PP
Add the given folder\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP The path to the config file\&. 
.br
\fIfolder\fP The folder\&. 
.RE
.PP

.SS "const \fBGlobalSettings::NameSet\fP & GlobalSettings::getAllMediaPlayerNames ()"

.PP
Get a set of all media players\&. 
.PP
\fBReturns:\fP
.RS 4
A set filled with every media player name\&. 
.RE
.PP

.SS "const \fBGlobalSettings::NameSet\fP & GlobalSettings::getAllMediaServiceNames ()"

.PP
Get the names of all of the media services\&. 
.PP
\fBReturns:\fP
.RS 4
A set filled with every media service name\&. 
.RE
.PP

.SS "const \fBGlobalSettings::NameSet\fP & GlobalSettings::getAllMediaTypeNames ()"

.PP
Get a set of all media types\&. 
.PP
\fBReturns:\fP
.RS 4
A set filled with every media type name\&. 
.RE
.PP

.SS "const \fBGlobalSettings::NameSet\fP & GlobalSettings::getAllMetadataScraperNames ()"

.PP
Get a set of all metadata scrapers\&. 
.PP
\fBReturns:\fP
.RS 4
A set filled with every metadata scraper name\&. 
.RE
.PP

.SS "\fBMediaItem\fP * GlobalSettings::getMediaItemByJSONFile (const QDir &file)"

.PP
Get a media item from its JSON file\&. \fCfile\fP is a \fCQDir\fP, so relative paths and links do not duplicate\&. If \fCfile\fP is not found, it is added\&.
.PP
\fBReturns:\fP
.RS 4
The desired media item\&. 
.RE
.PP

.SS "\fBMediaService\fP * GlobalSettings::getMediaServiceByName (const std::string &name)"

.PP
Get a media service by name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the media service\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The desired media service\&. 
.RE
.PP

.SS "\fBMediaPlayer\fP * GlobalSettings::getPlayerByName (const std::string &name)"

.PP
Get a media player by name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the player\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The desired media player or \fCNULL\fP if it does not exist\&. 
.RE
.PP

.SS "\fBValue\fP & GlobalSettings::getPlayerSettingsByName (const std::string &name)"

.PP
Get a media player's settings by name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the player\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The settings of the desired media player or \fCJson::Value::null\fP if it does not exist\&. 
.RE
.PP

.SS "\fBFolder\fP * GlobalSettings::getRootFolder ()"

.PP
Get the root folder\&. 
.PP
\fBReturns:\fP
.RS 4
The root folder\&. 
.RE
.PP

.SS "\fBMetadataScraper\fP * GlobalSettings::getScraperByName (const std::string &name)"

.PP
Get a metadata scraper by name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the scraper\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The desired scraper as an \fC\fBMetadataScraper\fP\fP object or \fCNULL\fP if it does not exist\&. 
.RE
.PP

.SS "\fBValue\fP & GlobalSettings::getScraperSettingsByName (const std::string &name)"

.PP
Get a metadata scraper's settings by name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the scraper\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The settings of the desired scraper or \fCJson::Value::null\fP if it does not exist\&. 
.RE
.PP

.SS "\fBValue\fP & GlobalSettings::getTypeByName (const std::string &name)"

.PP
Get the media type with the given name\&. 
.PP
\fBReturns:\fP
.RS 4
The default metadata settings for the given type\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for AWE Media Center from the source code\&.
