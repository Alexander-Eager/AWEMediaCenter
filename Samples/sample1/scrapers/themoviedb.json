// The Movie Database scraper
// website: www.themoviedb.org
{
	// name of this scraper that the user sees
	"name": "The Movie Database",
	
	// this scraper is only to be used on movie files
	"type": "Movie",

	// a movie file is just the name of the movie
	// we don't care about the path to the file, so
	// remove all characters until the first path
	// delimiter using ".*/". The filename can be
	// any sequence of characters that are not
	// path delimiters. The file extension is
	// not important to this scraper.
	"filename": ".*/([^/]+)\\.[[:alnum:]]*",

	// here are all of the procedures to run
	"procedures": [
		{
			// this first procedure gets the movie to use
			// since we only want one movie, do not repeat
			// this procedure
			"repeat": false,
			// we do want to make sure we get the right movie
			// though, so ask the user
			"ask user": true,

			// we are looking through the search results on themoviedb.org
			"look in file": "http://www.themoviedb.org/search/movie?query=$1",
			// $1 is the movie's website, $2 is the name, $3 is the year of release
			"for": "<a href=\"/movie/([[:alnum:]\\-]*)\" title=\"([[:alnum:][:punct:] ]*)\">\\2</a> <span>\\(([[:digit:]]*)\\)</span>",

			// set the name and year attributes accordingly
			"name": "$2",
			// notice how the . operator is used to set the "0_Year" attribute of "details"
			"details.0_Year": "$3",

			// these procedures all act on the movie's page
			"procedures": [
				{
					// this one gets the description of the movie
					// since there is only one description, do not repeat or ask the user
					"repeat": false,
					"ask user": false,

					// $1 was the movie's page, so look there
					"look in file": "http://www.themoviedb.org/movie/$1",
					// $1 is the description
					"for": "<meta name=\"description\" content=\"([[:alnum:][:punct:] ]*)\" />",

					// set the description accordingly
					"description": "$1",

					// there are no sub-procedures
					"procedures": []
				},
				{
					// this one gets images
					// currently, this only gets the main image, but eventually
					// it might get several images and let the user choose which ones to keep
					"repeat": false,
					"ask user": false,

					// $1 was the movie's page, so look there
					"look in file": "http://www.themoviedb.org/movie/$1",
					// $1 is the DVD cover art while $2 is the most liked fanart image on themoviedb's website
					// these links go to a downsized version of the file, i.e.
					// http://image.tmdb.org/t/p/w###/hexadecimal-name.jpg
					// I want the original, full-sized one, located at
					// http://image.tmdb.org/t/p/original/hexadecimal-name.jpg
					"for": "<meta property=\"og:image\" content=\"http://image\\.tmdb\\.org/t/p/[[:alnum:]]*/([[:alnum:]]*\\.[[:alpha:]]*)\" />[[:space:]]*<meta property=\"og:image\" content=\"http://image\\.tmdb\\.org/t/p/[[:alnum:]]*/([[:alnum:]]*\\.[[:alpha:]]*)\" />",

					// set the cover art
					"icons.1_Front": "http://image.tmdb.org/t/p/original/$1",
					"icons.0_default": "Front",

					// set the fanart
					"fanarts.1_Main": "http://image.tmdb.org/t/p/original/$2",
					"fanarts.0_default": "Main",

					// there are no sub-procedures
					"procedures": []
				},
				{
					// this gets the director(s) of the film
					// we want all of them, so repeat
					"repeat": true,
					// the user shouldn't care
					"ask user": false,

					// $1 was the movie's page, so look there
					"look in file": "http://www.themoviedb.org/movie/$1",
					// $1 is the person's name
					// there is a webpage linking to that person's info as well,
					// but I don't care about that so I skip over it with
					// "[[:alnum:]\\-]*"
					"for": "<span itemprop=\"director\" itemscope itemtype=\"http://schema.org/Person\"><a href=\"/person/[[:alnum:]\\-]*\" itemprop=\"url\"><span itemprop=\"name\">([[:alnum:] ]*)</span></a></span>",

					// append the director to the list of directors
					"details.1_Director(s)": "$1",

					// there are no sub-procedures
					"procedures": []
				},
				{
					// this gets the writer(s) of the film
					// we want all of them, so repeat
					"repeat": true,
					// the user shouldn't care
					"ask user": false,

					// $1 was the movie's page, so look there
					"look in file": "http://www.themoviedb.org/movie/$1",
					// $1 is the person's name
					// there is a webpage linking to that person's info as well,
					// but I don't care about that so I skip over it with
					// "[[:alnum:]\\-]*"
					"for": "<span itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\"><a href=\"/person/[[:alnum:]\\-]*\" itemprop=\"url\"><span itemprop=\"name\">([[:alnum:] ]*)</span></a></span>",

					// append the writer to the list of writers
					"details.2_Writer(s)": "$1",

					// there are no sub-procedures
					"procedures": []
				},
				{
					// this gets the main cast members of the film
					// we want all of the top four (or less), so repeat
					"repeat": true,
					// the user shouldn't care
					"ask user": false,

					// $1 was the movie's page, so look there
					"look in file": "http://www.themoviedb.org/movie/$1",
					// $1 is the person's name
					// there is a group of newlines/spaces inbetween tags
					// so I skip over that group with "[[:space:]]*"
					// there is a webpage linking to that person's info as well,
					// but I don't care about that so I skip over it with
					// "[[:alnum:]\\-]*"
					"for": "<span itemprop=\"actor\" itemscope itemtype=\"http://schema.org/Person\">[[:space:]]*<a href=\"/person/[[:alnum:]\\-]*\" itemprop=\"url\"><span itemprop=\"name\">([[:alnum:] ]*)</span></a>",

					// append the cast member to the list of members
					"details.3_Cast": "$1",

					// there are no sub-procedures
					"procedures": []
				}
			]
		}
	],

	// copy over all of the images I retrieved
	"copy": {
		// DVD cover art
		"icons.1_Front": "$1_icons.1_Front",
		// main fanart
		"fanarts.1_Main": "$1_fanarts.1_Main"
	}
}